using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Immutable;
using System.Text;

namespace Generator.Generators;

[Generator]
public class EndpointsGenerator : IIncrementalGenerator
{
    private const string targetAssembly = "MyCustomApp.API";

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // Step 1: Filter ClassDeclarationSyntax nodes
        IncrementalValuesProvider<ClassDeclarationSyntax?> classDeclarations = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: (node, _) => node is ClassDeclarationSyntax,
                transform: (ctx, _) => ctx.Node as ClassDeclarationSyntax)
            .Where(cls => cls is not null)!;

        // Step 2: Combine with Compilation
        IncrementalValueProvider<(Compilation Left, ImmutableArray<ClassDeclarationSyntax?> Right)>
            compilationAndClasses = context.CompilationProvider.Combine(classDeclarations.Collect());

        // Step 3: Register output
        context.RegisterSourceOutput(compilationAndClasses, Execute!);
    }

    private void Execute(SourceProductionContext context, (Compilation compilation, ImmutableArray<ClassDeclarationSyntax> classes) tuple)
    {
        (Compilation compilation, ImmutableArray<ClassDeclarationSyntax> classes) = tuple;

        if (compilation.AssemblyName is not targetAssembly)
            return;

        StringBuilder codeBuilder = new();
        StringBuilder methodBodyBuilder = new();

        foreach (ClassDeclarationSyntax classDeclaration in classes)
        {
            SemanticModel model = compilation.GetSemanticModel(classDeclaration.SyntaxTree);
            if (model.GetDeclaredSymbol(classDeclaration) is not INamedTypeSymbol symbol)
                continue;

            if (symbol.AllInterfaces.Any(i => i.Name == "IEndpoint"))
            {
                methodBodyBuilder.AppendLine($"        new {symbol.ToDisplayString()}().MapEndpoints(endpoints);");
            }
        }

        // Generate the final file content
        codeBuilder.AppendLine("// <auto-generated />");
        codeBuilder.AppendLine($"// Generated by EndpointExtension.g.cs in {targetAssembly}");
        codeBuilder.AppendLine("using Microsoft.AspNetCore.Routing;");
        codeBuilder.AppendLine();
        codeBuilder.AppendLine("namespace MyCustomApp.API.Extensions;");
        codeBuilder.AppendLine();
        codeBuilder.AppendLine("public static class EndpointsExtension");
        codeBuilder.AppendLine("{");
        codeBuilder.AppendLine("    public static IEndpointRouteBuilder MapAllEndpoints(this IEndpointRouteBuilder endpoints)");
        codeBuilder.AppendLine("    {");

        if (methodBodyBuilder.Length > 0)
        {
            codeBuilder.Append(methodBodyBuilder);
        }
        else
        {
            codeBuilder.AppendLine("        // No endpoints found.");
        }

        codeBuilder.AppendLine("        return endpoints;");
        codeBuilder.AppendLine("    }");
        codeBuilder.AppendLine("}");

        context.AddSource("EndpointExtension.g.cs", codeBuilder.ToString());
    }
}
